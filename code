#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include <cmath>

#include <Eigen/Dense>
#include <Eigen/Eigenvalues>

#include <opencv2/core.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>

#include <mlpack/core.hpp>
#include <mlpack/methods/ann/ffn.hpp>
#include <mlpack/methods/ann/layer/layer.hpp>
#include <mlpack/methods/ann/loss_functions/cross_entropy_error.hpp>
#include <mlpack/methods/ann/loss_functions/mean_squared_error.hpp>
#include <mlpack/methods/ann/init_rules/he_init.hpp>
#include <mlpack/methods/ann/init_rules/glorot_init.hpp>
#include <mlpack/methods/ann/activation_functions/logistic_function.hpp>
#include <mlpack/methods/ann/activation_functions/rectifier_function.hpp>
#include <mlpack/methods/ann/activation_functions/softmax_function.hpp>
#include <mlpack/methods/ann/optimizer/rmsprop.hpp>
#include <mlpack/methods/ann/optimizer/adam.hpp>
#include <mlpack/methods/ann/regularizer/l2_weight_decay.hpp>

using namespace std;
using namespace Eigen;
using namespace cv;
using namespace mlpack;
using namespace mlpack::ann;

int main()
{
    MatrixXd X, T;
    MatrixXd X_train, X_test, t_train, t_test;
    vector<string> names;

    // Load data
    ifstream infile("JSVulnerabilityDataSet.csv");
    string line;
    getline(infile, line); // skip header line
    vector<string> headers;
    while (getline(infile, line)) {
        stringstream ss(line);
        string field;
        int i = 0;
        while (getline(ss, field, ',')) {
            if (i >= 4) {
                if (i == 4) {
                    headers.push_back(field);
                }
                else {
                    X(headers.size() - 1, i - 5) = stod(field);
                }
            }
            i++;
        }
        T(headers.size() - 1, 0) = stod(field);
    }

    // Preprocess data
    StandardScaler scaler;
    scaler.Fit(X);
    X = scaler.Transform(X);

    PCA pca(5);
    pca.Fit(X);
    X = pca.Transform(X);

    TrainTestSplit(X, T, X_train, X_test, t_train, t_test, 0.2);

    // Regression models
    LinearRegression lr;
    RidgeRegression ridge;

    vector<LayerTypes<LogisticFunction>> architecture = {
        Layer(5, 10),
        Layer(10, 1, new LogisticFunction())
    };
    FFN<MeanSquaredError<>, HeInitialization> nn(architecture);
    RMSProp opt(0.001, 0.9, 1e-8, 100000);
    nn.Train(X_train, t_train, opt);

    vector<RegressionModel> regression_models = { lr, ridge, nn };
    names = { "Linear Regression", "Ridge Regression", "Neural Network" };

    for (size_t i = 0; i < regression_models.size(); i++) {
        RegressionModel model = regression_models[i];
        string name = names[i];

        cout << name << endl;
        model.Train(X_train, t_train);
        double train_score = model.Evaluate(X_train, t_train);
        double test_score = model.Evaluate(X_test, t_test);
        cout << "Train Accuracy: " << train
